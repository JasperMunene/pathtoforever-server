"""changes

Revision ID: f5a1e96f7791
Revises: 
Create Date: 2025-10-02 15:29:59.998558

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'f5a1e96f7791'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index('ix_users_email_lower', [sa.literal_column('lower(email)')], unique=True)
        batch_op.create_index(batch_op.f('ix_users_name'), ['name'], unique=False)

    op.create_table('matches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id_1', sa.String(), nullable=False),
    sa.Column('user_id_2', sa.String(), nullable=False),
    sa.Column('match_status', sa.Enum('pending', 'matched', 'declined', 'blocked', name='match_status'), nullable=False),
    sa.Column('compatibility_score', sa.Integer(), nullable=True),
    sa.Column('ai_explanation', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('user_id_1 < user_id_2', name=op.f('ck_matches_check_user_order')),
    sa.ForeignKeyConstraint(['user_id_1'], ['users.id'], name=op.f('fk_matches_user_id_1_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id_2'], ['users.id'], name=op.f('fk_matches_user_id_2_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_matches')),
    sa.UniqueConstraint('user_id_1', 'user_id_2', name='uq_match_pair')
    )
    op.create_table('payments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('paystack_reference', sa.String(length=255), nullable=False),
    sa.Column('paystack_transaction_id', sa.String(length=255), nullable=True),
    sa.Column('paystack_customer_code', sa.String(length=255), nullable=True),
    sa.Column('plan_type', sa.Enum('premium', 'boost', 'super_likes', name='plan_types'), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('status', sa.Enum('pending', 'success', 'failed', 'abandoned', name='payment_status'), nullable=False),
    sa.Column('authorization_url', sa.String(length=500), nullable=True),
    sa.Column('access_code', sa.String(length=100), nullable=True),
    sa.Column('channel', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_payments_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payments'))
    )
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.create_index('idx_payments_created', ['created_at'], unique=False)
        batch_op.create_index('idx_payments_paystack_ref', ['paystack_reference'], unique=False)
        batch_op.create_index('idx_payments_user_status', ['user_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_payments_paystack_customer_code'), ['paystack_customer_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_payments_paystack_reference'), ['paystack_reference'], unique=True)
        batch_op.create_index(batch_op.f('ix_payments_paystack_transaction_id'), ['paystack_transaction_id'], unique=False)

    op.create_table('profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.String(length=10), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('interests', sa.String(length=500), nullable=True),
    sa.Column('photos', sa.JSON(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('premium', sa.Boolean(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_profiles_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_profiles')),
    sa.UniqueConstraint('user_id', name=op.f('uq_profiles_user_id'))
    )
    with op.batch_alter_table('profiles', schema=None) as batch_op:
        batch_op.create_index('idx_profile_age_gender', ['age', 'gender'], unique=False)
        batch_op.create_index('idx_profile_location', ['location'], unique=False)

    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('paystack_subscription_code', sa.String(length=255), nullable=False),
    sa.Column('paystack_plan_code', sa.String(length=255), nullable=False),
    sa.Column('paystack_customer_code', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('active', 'cancelled', 'non-renewing', 'expired', name='subscription_status'), nullable=False),
    sa.Column('plan_type', sa.Enum('premium', 'premium_plus', name='subscription_plans'), nullable=False),
    sa.Column('email_token', sa.String(length=255), nullable=True),
    sa.Column('subscription_interval', sa.String(length=20), nullable=False),
    sa.Column('current_period_start', sa.DateTime(), nullable=False),
    sa.Column('current_period_end', sa.DateTime(), nullable=False),
    sa.Column('next_payment_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_subscriptions_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_subscriptions')),
    sa.UniqueConstraint('user_id', name=op.f('uq_subscriptions_user_id'))
    )
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.create_index('idx_subscriptions_next_payment', ['next_payment_date'], unique=False)
        batch_op.create_index('idx_subscriptions_period_end', ['current_period_end'], unique=False)
        batch_op.create_index('idx_subscriptions_status', ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_paystack_customer_code'), ['paystack_customer_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_paystack_subscription_code'), ['paystack_subscription_code'], unique=True)

    op.create_table('swipes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('swiper_id', sa.String(), nullable=False),
    sa.Column('swiped_id', sa.String(), nullable=False),
    sa.Column('direction', sa.Enum('like', 'dislike', 'super_like', name='swipe_direction'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('swiper_id != swiped_id', name=op.f('ck_swipes_check_no_self_swipe')),
    sa.ForeignKeyConstraint(['swiped_id'], ['users.id'], name=op.f('fk_swipes_swiped_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['swiper_id'], ['users.id'], name=op.f('fk_swipes_swiper_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_swipes')),
    sa.UniqueConstraint('swiper_id', 'swiped_id', name='uq_swipe_pair')
    )
    with op.batch_alter_table('swipes', schema=None) as batch_op:
        batch_op.create_index('idx_swiper_swiped', ['swiper_id', 'swiped_id'], unique=False)

    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.String(), nullable=False),
    sa.Column('message_text', sa.Text(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], name=op.f('fk_messages_match_id_matches'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('fk_messages_sender_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_messages'))
    )
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.create_index('idx_match_created', ['match_id', 'created_at'], unique=False)
        batch_op.create_index('idx_sender_created', ['sender_id', 'created_at'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.drop_index('idx_sender_created')
        batch_op.drop_index('idx_match_created')

    op.drop_table('messages')
    with op.batch_alter_table('swipes', schema=None) as batch_op:
        batch_op.drop_index('idx_swiper_swiped')

    op.drop_table('swipes')
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_subscriptions_paystack_subscription_code'))
        batch_op.drop_index(batch_op.f('ix_subscriptions_paystack_customer_code'))
        batch_op.drop_index('idx_subscriptions_status')
        batch_op.drop_index('idx_subscriptions_period_end')
        batch_op.drop_index('idx_subscriptions_next_payment')

    op.drop_table('subscriptions')
    with op.batch_alter_table('profiles', schema=None) as batch_op:
        batch_op.drop_index('idx_profile_location')
        batch_op.drop_index('idx_profile_age_gender')

    op.drop_table('profiles')
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payments_paystack_transaction_id'))
        batch_op.drop_index(batch_op.f('ix_payments_paystack_reference'))
        batch_op.drop_index(batch_op.f('ix_payments_paystack_customer_code'))
        batch_op.drop_index('idx_payments_user_status')
        batch_op.drop_index('idx_payments_paystack_ref')
        batch_op.drop_index('idx_payments_created')

    op.drop_table('payments')
    op.drop_table('matches')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_name'))
        batch_op.drop_index('ix_users_email_lower')
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index(batch_op.f('ix_users_created_at'))

    op.drop_table('users')
    # ### end Alembic commands ###
